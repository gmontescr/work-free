#!/usr/bin/python3
import requests,json, random, string
from getid import get_incoming_id, get_vmta_id

# this needs to be changed:
creds = ["USER", "PASS"]
host = "https://ENDPOINT"

def post_request(data, endpoint):
  return requests.post(endpoint, data, auth=(creds[0], creds[1]))

def gen_passwd(lCount, dCount):
  letters =  ''.join((random.choice(string.ascii_letters) for i in range(lCount)))
  digits = ''.join((random.choice(string.digits) for i in range(dCount)))
  passwd = list(letters+digits)
  random.shuffle(passwd)
  return ''.join(passwd)
  
def create_urldomain(domain):
  data = json.dumps({
    "url_domain": {
      "domain": domain,
      "ssl": False 
    }
  })
  new_urldomain = post_request(data, host + "/ga/api/v3/eng/url_domains")
  return "Creating new url domain:\n" + new_urldomain.text

def create_domain(domain):
  data = json.dumps({
    "domain": {
      "domain": domain,
       "email_status": "disabled" 
      }
  })
  new_domain = post_request(data, host + "/ga/api/v3/eng/incoming_email_domains")
  return "Creating new domain:\n" + new_domain.text

def create_fbl(domain, fbl):
  api_id = get_incoming_id(domain)['data']['domains'][0]['id']
  data = json.dumps({ 
    "mailbox": {
      "localpart": fbl 
     }
  })
  new_fbl = post_request(data, host +  "/ga/api/v3/eng/incoming_email_domains/%s/spam_complaint_mailboxes" % api_id)
  time.sleep(1)
  return "Creating feedbackloop: %s" % fbl + new_fbl.text

def create_bounce(domain, address):
  api_id = get_incoming_id(domain)['data']['domains'][0]['id']
  data = json.dumps({
    "mailbox": {
      "localpart": address
     }
  })
  new_bounce = post_request(data, host +  "/ga/api/v3/eng/incoming_email_domains/%s/bounce_mailboxes" % api_id)
  return "Creating bounce: " + new_bounce.text


def create_forward(domain,name):
  api_id = get_incoming_id(domain)['data']['domains'][0]['id']
  data = json.dumps({
    "mailbox": {
      "localpart": name,
      "forward_to": [
        "EMAIL@EMAIL.com"
      ],
      "is_wildcard": True
    }
  })
  new_forward = post_request(data, host +  "/ga/api/v3/eng/incoming_email_domains/%s/forwarding_mailboxes" % api_id)
  return "Creating forward: " + new_forward.text


def create_user(domain, username):
  api_id = get_incoming_id(domain)['data']['domains'][0]['id']
  data = json.dumps({
    "mailbox": {
      "localpart": username,
      "is_wildcard": True,
      "password": gen_passwd(12,4),
      "delivery_mode": "local"
    }
  })
  new_user = post_request(data, host +  "/ga/api/v3/eng/incoming_email_domains/%s/user_mailboxes" % api_id)
  return "Creating user mailbox: \n" + new_user.text


def create_vmta(name, ipaddress, hostname):
  data = json.dumps({
    "ip_address": {
      "name": name,
      "ip": ipaddress,
      "hostname": hostname,
      "throttling_template": {
        "name": "Day 1"
      }
    }
  })
  new_vmta =  post_request(data, host + "/ga/api/v3/eng/ip_addresses")
  return "Creating VMTA:\n" + new_vmta.text  

def create_mailclass(name, domain):
  data = json.dumps({
      "mail_class": {
        "name": name,
        "listid": name,
        "virtual_mta": {
          "name": name
        },
      "track_clicks_and_opens": True,
      "url_domain": {
        "domain": domain
      }
    }
  })
  new_mailclass =  post_request(data, host + "/ga/api/v3/eng/mail_classes")
  return "Creating mailclass:\n" + new_mailclass.text 


def main():
  print(create_domain("real-test-ga.com"))
  print(create_urldomain("real-test-ga.com"))
  for i in get_fbls():
    print(create_fbl("real-test-ga.com", str(i)))
  print(create_bounce("real-test-ga.com", "bounce"))
  print(create_forward("real-test-ga.com", "abuse"))
  print(create_forward("real-test-ga.com", "webmaster"))
  print(create_user("real-test-ga.com", "info"))
  print(create_user("real-test-ga.com", "postmaster"))
  print(create_vmta("realtestga", "10.10.10.1", "realtestga"))
  print(create_mailclass("realtestga", "real-test-ga.com"))

if __name__ == "__main__":
  main()
